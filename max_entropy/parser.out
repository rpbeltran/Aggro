Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    OTHERWISE
    ELSE
    BY

Grammar

Rule 0     S' -> back_utilization
Rule 1     back_utilization -> IF proposition THEN proposition
Rule 2     proposition -> proposition AND proposition
Rule 3     proposition -> proposition OR proposition
Rule 4     proposition -> NOT proposition
Rule 5     proposition -> numeric_expression EQUALS EQUALS numeric_expression
Rule 6     proposition -> numeric_expression EQUALS numeric_expression
Rule 7     proposition -> numeric_expression inequality numeric_expression
Rule 8     proposition -> numeric_expression EVENLY
Rule 9     proposition -> BOOLEAN_CONSTANT
Rule 10    inequality -> inequality OR EQUALS
Rule 11    inequality -> inequality OR EQUALS TO
Rule 12    inequality -> EQUALS inequality
Rule 13    inequality -> CMP_LT
Rule 14    inequality -> CMP_GT
Rule 15    inequality -> THAN
Rule 16    inequality -> CMP_LT THAN
Rule 17    inequality -> CMP_GT THAN
Rule 18    numeric_expression -> numeric_expression PLUS numeric_expression
Rule 19    numeric_expression -> numeric_expression MINUS numeric_expression
Rule 20    numeric_expression -> numeric_expression TIMES numeric_expression
Rule 21    numeric_expression -> numeric_expression DIVIDE numeric_expression
Rule 22    numeric_expression -> numeric_expression POWER numeric_expression
Rule 23    numeric_expression -> numeric_expression MOD numeric_expression
Rule 24    numeric_expression -> identifier
Rule 25    numeric_expression -> numeric_const
Rule 26    numeric_const -> NUMERIC_CONSTANT
Rule 27    identifier -> identifier_content
Rule 28    identifier_content -> UNWORD
Rule 29    identifier_content -> UNWORD identifier_content

Terminals, with rules where they appear

AND                  : 2
BOOLEAN_CONSTANT     : 9
BY                   : 
CMP_GT               : 14 17
CMP_LT               : 13 16
DIVIDE               : 21
ELSE                 : 
EQUALS               : 5 5 6 10 11 12
EVENLY               : 8
IF                   : 1
MINUS                : 19
MOD                  : 23
NOT                  : 4
NUMERIC_CONSTANT     : 26
OR                   : 3 10 11
OTHERWISE            : 
PLUS                 : 18
POWER                : 22
THAN                 : 15 16 17
THEN                 : 1
TIMES                : 20
TO                   : 11
UNWORD               : 28 29
error                : 

Nonterminals, with rules where they appear

back_utilization     : 0
identifier           : 24
identifier_content   : 27 29
inequality           : 7 10 11 12
numeric_const        : 25
numeric_expression   : 5 5 6 6 7 7 8 18 18 19 19 20 20 21 21 22 22 23 23
proposition          : 1 1 2 2 3 3 4

Parsing method: LALR

state 0

    (0) S' -> . back_utilization
    (1) back_utilization -> . IF proposition THEN proposition

    IF              shift and go to state 2

    back_utilization               shift and go to state 1

state 1

    (0) S' -> back_utilization .



state 2

    (1) back_utilization -> IF . proposition THEN proposition
    (2) proposition -> . proposition AND proposition
    (3) proposition -> . proposition OR proposition
    (4) proposition -> . NOT proposition
    (5) proposition -> . numeric_expression EQUALS EQUALS numeric_expression
    (6) proposition -> . numeric_expression EQUALS numeric_expression
    (7) proposition -> . numeric_expression inequality numeric_expression
    (8) proposition -> . numeric_expression EVENLY
    (9) proposition -> . BOOLEAN_CONSTANT
    (18) numeric_expression -> . numeric_expression PLUS numeric_expression
    (19) numeric_expression -> . numeric_expression MINUS numeric_expression
    (20) numeric_expression -> . numeric_expression TIMES numeric_expression
    (21) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (22) numeric_expression -> . numeric_expression POWER numeric_expression
    (23) numeric_expression -> . numeric_expression MOD numeric_expression
    (24) numeric_expression -> . identifier
    (25) numeric_expression -> . numeric_const
    (27) identifier -> . identifier_content
    (26) numeric_const -> . NUMERIC_CONSTANT
    (28) identifier_content -> . UNWORD
    (29) identifier_content -> . UNWORD identifier_content

    NOT             shift and go to state 10
    BOOLEAN_CONSTANT shift and go to state 8
    NUMERIC_CONSTANT shift and go to state 5
    UNWORD          shift and go to state 7

    identifier_content             shift and go to state 9
    numeric_const                  shift and go to state 6
    proposition                    shift and go to state 3
    numeric_expression             shift and go to state 4
    identifier                     shift and go to state 11

state 3

    (1) back_utilization -> IF proposition . THEN proposition
    (2) proposition -> proposition . AND proposition
    (3) proposition -> proposition . OR proposition

    THEN            shift and go to state 13
    AND             shift and go to state 12
    OR              shift and go to state 14


state 4

    (5) proposition -> numeric_expression . EQUALS EQUALS numeric_expression
    (6) proposition -> numeric_expression . EQUALS numeric_expression
    (7) proposition -> numeric_expression . inequality numeric_expression
    (8) proposition -> numeric_expression . EVENLY
    (18) numeric_expression -> numeric_expression . PLUS numeric_expression
    (19) numeric_expression -> numeric_expression . MINUS numeric_expression
    (20) numeric_expression -> numeric_expression . TIMES numeric_expression
    (21) numeric_expression -> numeric_expression . DIVIDE numeric_expression
    (22) numeric_expression -> numeric_expression . POWER numeric_expression
    (23) numeric_expression -> numeric_expression . MOD numeric_expression
    (10) inequality -> . inequality OR EQUALS
    (11) inequality -> . inequality OR EQUALS TO
    (12) inequality -> . EQUALS inequality
    (13) inequality -> . CMP_LT
    (14) inequality -> . CMP_GT
    (15) inequality -> . THAN
    (16) inequality -> . CMP_LT THAN
    (17) inequality -> . CMP_GT THAN

    EQUALS          shift and go to state 18
    EVENLY          shift and go to state 26
    PLUS            shift and go to state 21
    MINUS           shift and go to state 25
    TIMES           shift and go to state 19
    DIVIDE          shift and go to state 16
    POWER           shift and go to state 17
    MOD             shift and go to state 23
    CMP_LT          shift and go to state 22
    CMP_GT          shift and go to state 15
    THAN            shift and go to state 24

    inequality                     shift and go to state 20

state 5

    (26) numeric_const -> NUMERIC_CONSTANT .

    PLUS            reduce using rule 26 (numeric_const -> NUMERIC_CONSTANT .)
    MINUS           reduce using rule 26 (numeric_const -> NUMERIC_CONSTANT .)
    TIMES           reduce using rule 26 (numeric_const -> NUMERIC_CONSTANT .)
    DIVIDE          reduce using rule 26 (numeric_const -> NUMERIC_CONSTANT .)
    POWER           reduce using rule 26 (numeric_const -> NUMERIC_CONSTANT .)
    MOD             reduce using rule 26 (numeric_const -> NUMERIC_CONSTANT .)
    THEN            reduce using rule 26 (numeric_const -> NUMERIC_CONSTANT .)
    AND             reduce using rule 26 (numeric_const -> NUMERIC_CONSTANT .)
    OR              reduce using rule 26 (numeric_const -> NUMERIC_CONSTANT .)
    $end            reduce using rule 26 (numeric_const -> NUMERIC_CONSTANT .)
    EQUALS          reduce using rule 26 (numeric_const -> NUMERIC_CONSTANT .)
    EVENLY          reduce using rule 26 (numeric_const -> NUMERIC_CONSTANT .)
    CMP_LT          reduce using rule 26 (numeric_const -> NUMERIC_CONSTANT .)
    CMP_GT          reduce using rule 26 (numeric_const -> NUMERIC_CONSTANT .)
    THAN            reduce using rule 26 (numeric_const -> NUMERIC_CONSTANT .)


state 6

    (25) numeric_expression -> numeric_const .

    PLUS            reduce using rule 25 (numeric_expression -> numeric_const .)
    MINUS           reduce using rule 25 (numeric_expression -> numeric_const .)
    TIMES           reduce using rule 25 (numeric_expression -> numeric_const .)
    DIVIDE          reduce using rule 25 (numeric_expression -> numeric_const .)
    POWER           reduce using rule 25 (numeric_expression -> numeric_const .)
    MOD             reduce using rule 25 (numeric_expression -> numeric_const .)
    EQUALS          reduce using rule 25 (numeric_expression -> numeric_const .)
    EVENLY          reduce using rule 25 (numeric_expression -> numeric_const .)
    CMP_LT          reduce using rule 25 (numeric_expression -> numeric_const .)
    CMP_GT          reduce using rule 25 (numeric_expression -> numeric_const .)
    THAN            reduce using rule 25 (numeric_expression -> numeric_const .)
    THEN            reduce using rule 25 (numeric_expression -> numeric_const .)
    AND             reduce using rule 25 (numeric_expression -> numeric_const .)
    OR              reduce using rule 25 (numeric_expression -> numeric_const .)
    $end            reduce using rule 25 (numeric_expression -> numeric_const .)


state 7

    (28) identifier_content -> UNWORD .
    (29) identifier_content -> UNWORD . identifier_content
    (28) identifier_content -> . UNWORD
    (29) identifier_content -> . UNWORD identifier_content

    PLUS            reduce using rule 28 (identifier_content -> UNWORD .)
    MINUS           reduce using rule 28 (identifier_content -> UNWORD .)
    TIMES           reduce using rule 28 (identifier_content -> UNWORD .)
    DIVIDE          reduce using rule 28 (identifier_content -> UNWORD .)
    POWER           reduce using rule 28 (identifier_content -> UNWORD .)
    MOD             reduce using rule 28 (identifier_content -> UNWORD .)
    EQUALS          reduce using rule 28 (identifier_content -> UNWORD .)
    EVENLY          reduce using rule 28 (identifier_content -> UNWORD .)
    CMP_LT          reduce using rule 28 (identifier_content -> UNWORD .)
    CMP_GT          reduce using rule 28 (identifier_content -> UNWORD .)
    THAN            reduce using rule 28 (identifier_content -> UNWORD .)
    THEN            reduce using rule 28 (identifier_content -> UNWORD .)
    AND             reduce using rule 28 (identifier_content -> UNWORD .)
    OR              reduce using rule 28 (identifier_content -> UNWORD .)
    $end            reduce using rule 28 (identifier_content -> UNWORD .)
    UNWORD          shift and go to state 7

    identifier_content             shift and go to state 27

state 8

    (9) proposition -> BOOLEAN_CONSTANT .

    THEN            reduce using rule 9 (proposition -> BOOLEAN_CONSTANT .)
    AND             reduce using rule 9 (proposition -> BOOLEAN_CONSTANT .)
    OR              reduce using rule 9 (proposition -> BOOLEAN_CONSTANT .)
    $end            reduce using rule 9 (proposition -> BOOLEAN_CONSTANT .)


state 9

    (27) identifier -> identifier_content .

    PLUS            reduce using rule 27 (identifier -> identifier_content .)
    MINUS           reduce using rule 27 (identifier -> identifier_content .)
    TIMES           reduce using rule 27 (identifier -> identifier_content .)
    DIVIDE          reduce using rule 27 (identifier -> identifier_content .)
    POWER           reduce using rule 27 (identifier -> identifier_content .)
    MOD             reduce using rule 27 (identifier -> identifier_content .)
    EQUALS          reduce using rule 27 (identifier -> identifier_content .)
    EVENLY          reduce using rule 27 (identifier -> identifier_content .)
    CMP_LT          reduce using rule 27 (identifier -> identifier_content .)
    CMP_GT          reduce using rule 27 (identifier -> identifier_content .)
    THAN            reduce using rule 27 (identifier -> identifier_content .)
    THEN            reduce using rule 27 (identifier -> identifier_content .)
    AND             reduce using rule 27 (identifier -> identifier_content .)
    OR              reduce using rule 27 (identifier -> identifier_content .)
    $end            reduce using rule 27 (identifier -> identifier_content .)


state 10

    (4) proposition -> NOT . proposition
    (2) proposition -> . proposition AND proposition
    (3) proposition -> . proposition OR proposition
    (4) proposition -> . NOT proposition
    (5) proposition -> . numeric_expression EQUALS EQUALS numeric_expression
    (6) proposition -> . numeric_expression EQUALS numeric_expression
    (7) proposition -> . numeric_expression inequality numeric_expression
    (8) proposition -> . numeric_expression EVENLY
    (9) proposition -> . BOOLEAN_CONSTANT
    (18) numeric_expression -> . numeric_expression PLUS numeric_expression
    (19) numeric_expression -> . numeric_expression MINUS numeric_expression
    (20) numeric_expression -> . numeric_expression TIMES numeric_expression
    (21) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (22) numeric_expression -> . numeric_expression POWER numeric_expression
    (23) numeric_expression -> . numeric_expression MOD numeric_expression
    (24) numeric_expression -> . identifier
    (25) numeric_expression -> . numeric_const
    (27) identifier -> . identifier_content
    (26) numeric_const -> . NUMERIC_CONSTANT
    (28) identifier_content -> . UNWORD
    (29) identifier_content -> . UNWORD identifier_content

    NOT             shift and go to state 10
    BOOLEAN_CONSTANT shift and go to state 8
    NUMERIC_CONSTANT shift and go to state 5
    UNWORD          shift and go to state 7

    identifier_content             shift and go to state 9
    numeric_const                  shift and go to state 6
    proposition                    shift and go to state 28
    numeric_expression             shift and go to state 4
    identifier                     shift and go to state 11

state 11

    (24) numeric_expression -> identifier .

    PLUS            reduce using rule 24 (numeric_expression -> identifier .)
    MINUS           reduce using rule 24 (numeric_expression -> identifier .)
    TIMES           reduce using rule 24 (numeric_expression -> identifier .)
    DIVIDE          reduce using rule 24 (numeric_expression -> identifier .)
    POWER           reduce using rule 24 (numeric_expression -> identifier .)
    MOD             reduce using rule 24 (numeric_expression -> identifier .)
    EQUALS          reduce using rule 24 (numeric_expression -> identifier .)
    EVENLY          reduce using rule 24 (numeric_expression -> identifier .)
    CMP_LT          reduce using rule 24 (numeric_expression -> identifier .)
    CMP_GT          reduce using rule 24 (numeric_expression -> identifier .)
    THAN            reduce using rule 24 (numeric_expression -> identifier .)
    THEN            reduce using rule 24 (numeric_expression -> identifier .)
    AND             reduce using rule 24 (numeric_expression -> identifier .)
    OR              reduce using rule 24 (numeric_expression -> identifier .)
    $end            reduce using rule 24 (numeric_expression -> identifier .)


state 12

    (2) proposition -> proposition AND . proposition
    (2) proposition -> . proposition AND proposition
    (3) proposition -> . proposition OR proposition
    (4) proposition -> . NOT proposition
    (5) proposition -> . numeric_expression EQUALS EQUALS numeric_expression
    (6) proposition -> . numeric_expression EQUALS numeric_expression
    (7) proposition -> . numeric_expression inequality numeric_expression
    (8) proposition -> . numeric_expression EVENLY
    (9) proposition -> . BOOLEAN_CONSTANT
    (18) numeric_expression -> . numeric_expression PLUS numeric_expression
    (19) numeric_expression -> . numeric_expression MINUS numeric_expression
    (20) numeric_expression -> . numeric_expression TIMES numeric_expression
    (21) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (22) numeric_expression -> . numeric_expression POWER numeric_expression
    (23) numeric_expression -> . numeric_expression MOD numeric_expression
    (24) numeric_expression -> . identifier
    (25) numeric_expression -> . numeric_const
    (27) identifier -> . identifier_content
    (26) numeric_const -> . NUMERIC_CONSTANT
    (28) identifier_content -> . UNWORD
    (29) identifier_content -> . UNWORD identifier_content

    NOT             shift and go to state 10
    BOOLEAN_CONSTANT shift and go to state 8
    NUMERIC_CONSTANT shift and go to state 5
    UNWORD          shift and go to state 7

    identifier_content             shift and go to state 9
    numeric_const                  shift and go to state 6
    proposition                    shift and go to state 29
    numeric_expression             shift and go to state 4
    identifier                     shift and go to state 11

state 13

    (1) back_utilization -> IF proposition THEN . proposition
    (2) proposition -> . proposition AND proposition
    (3) proposition -> . proposition OR proposition
    (4) proposition -> . NOT proposition
    (5) proposition -> . numeric_expression EQUALS EQUALS numeric_expression
    (6) proposition -> . numeric_expression EQUALS numeric_expression
    (7) proposition -> . numeric_expression inequality numeric_expression
    (8) proposition -> . numeric_expression EVENLY
    (9) proposition -> . BOOLEAN_CONSTANT
    (18) numeric_expression -> . numeric_expression PLUS numeric_expression
    (19) numeric_expression -> . numeric_expression MINUS numeric_expression
    (20) numeric_expression -> . numeric_expression TIMES numeric_expression
    (21) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (22) numeric_expression -> . numeric_expression POWER numeric_expression
    (23) numeric_expression -> . numeric_expression MOD numeric_expression
    (24) numeric_expression -> . identifier
    (25) numeric_expression -> . numeric_const
    (27) identifier -> . identifier_content
    (26) numeric_const -> . NUMERIC_CONSTANT
    (28) identifier_content -> . UNWORD
    (29) identifier_content -> . UNWORD identifier_content

    NOT             shift and go to state 10
    BOOLEAN_CONSTANT shift and go to state 8
    NUMERIC_CONSTANT shift and go to state 5
    UNWORD          shift and go to state 7

    identifier_content             shift and go to state 9
    numeric_const                  shift and go to state 6
    proposition                    shift and go to state 30
    numeric_expression             shift and go to state 4
    identifier                     shift and go to state 11

state 14

    (3) proposition -> proposition OR . proposition
    (2) proposition -> . proposition AND proposition
    (3) proposition -> . proposition OR proposition
    (4) proposition -> . NOT proposition
    (5) proposition -> . numeric_expression EQUALS EQUALS numeric_expression
    (6) proposition -> . numeric_expression EQUALS numeric_expression
    (7) proposition -> . numeric_expression inequality numeric_expression
    (8) proposition -> . numeric_expression EVENLY
    (9) proposition -> . BOOLEAN_CONSTANT
    (18) numeric_expression -> . numeric_expression PLUS numeric_expression
    (19) numeric_expression -> . numeric_expression MINUS numeric_expression
    (20) numeric_expression -> . numeric_expression TIMES numeric_expression
    (21) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (22) numeric_expression -> . numeric_expression POWER numeric_expression
    (23) numeric_expression -> . numeric_expression MOD numeric_expression
    (24) numeric_expression -> . identifier
    (25) numeric_expression -> . numeric_const
    (27) identifier -> . identifier_content
    (26) numeric_const -> . NUMERIC_CONSTANT
    (28) identifier_content -> . UNWORD
    (29) identifier_content -> . UNWORD identifier_content

    NOT             shift and go to state 10
    BOOLEAN_CONSTANT shift and go to state 8
    NUMERIC_CONSTANT shift and go to state 5
    UNWORD          shift and go to state 7

    identifier_content             shift and go to state 9
    numeric_const                  shift and go to state 6
    proposition                    shift and go to state 31
    numeric_expression             shift and go to state 4
    identifier                     shift and go to state 11

state 15

    (14) inequality -> CMP_GT .
    (17) inequality -> CMP_GT . THAN

    OR              reduce using rule 14 (inequality -> CMP_GT .)
    NUMERIC_CONSTANT reduce using rule 14 (inequality -> CMP_GT .)
    UNWORD          reduce using rule 14 (inequality -> CMP_GT .)
    THAN            shift and go to state 32


state 16

    (21) numeric_expression -> numeric_expression DIVIDE . numeric_expression
    (18) numeric_expression -> . numeric_expression PLUS numeric_expression
    (19) numeric_expression -> . numeric_expression MINUS numeric_expression
    (20) numeric_expression -> . numeric_expression TIMES numeric_expression
    (21) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (22) numeric_expression -> . numeric_expression POWER numeric_expression
    (23) numeric_expression -> . numeric_expression MOD numeric_expression
    (24) numeric_expression -> . identifier
    (25) numeric_expression -> . numeric_const
    (27) identifier -> . identifier_content
    (26) numeric_const -> . NUMERIC_CONSTANT
    (28) identifier_content -> . UNWORD
    (29) identifier_content -> . UNWORD identifier_content

    NUMERIC_CONSTANT shift and go to state 5
    UNWORD          shift and go to state 7

    numeric_expression             shift and go to state 33
    numeric_const                  shift and go to state 6
    identifier                     shift and go to state 11
    identifier_content             shift and go to state 9

state 17

    (22) numeric_expression -> numeric_expression POWER . numeric_expression
    (18) numeric_expression -> . numeric_expression PLUS numeric_expression
    (19) numeric_expression -> . numeric_expression MINUS numeric_expression
    (20) numeric_expression -> . numeric_expression TIMES numeric_expression
    (21) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (22) numeric_expression -> . numeric_expression POWER numeric_expression
    (23) numeric_expression -> . numeric_expression MOD numeric_expression
    (24) numeric_expression -> . identifier
    (25) numeric_expression -> . numeric_const
    (27) identifier -> . identifier_content
    (26) numeric_const -> . NUMERIC_CONSTANT
    (28) identifier_content -> . UNWORD
    (29) identifier_content -> . UNWORD identifier_content

    NUMERIC_CONSTANT shift and go to state 5
    UNWORD          shift and go to state 7

    numeric_expression             shift and go to state 34
    numeric_const                  shift and go to state 6
    identifier                     shift and go to state 11
    identifier_content             shift and go to state 9

state 18

    (5) proposition -> numeric_expression EQUALS . EQUALS numeric_expression
    (6) proposition -> numeric_expression EQUALS . numeric_expression
    (12) inequality -> EQUALS . inequality
    (18) numeric_expression -> . numeric_expression PLUS numeric_expression
    (19) numeric_expression -> . numeric_expression MINUS numeric_expression
    (20) numeric_expression -> . numeric_expression TIMES numeric_expression
    (21) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (22) numeric_expression -> . numeric_expression POWER numeric_expression
    (23) numeric_expression -> . numeric_expression MOD numeric_expression
    (24) numeric_expression -> . identifier
    (25) numeric_expression -> . numeric_const
    (10) inequality -> . inequality OR EQUALS
    (11) inequality -> . inequality OR EQUALS TO
    (12) inequality -> . EQUALS inequality
    (13) inequality -> . CMP_LT
    (14) inequality -> . CMP_GT
    (15) inequality -> . THAN
    (16) inequality -> . CMP_LT THAN
    (17) inequality -> . CMP_GT THAN
    (27) identifier -> . identifier_content
    (26) numeric_const -> . NUMERIC_CONSTANT
    (28) identifier_content -> . UNWORD
    (29) identifier_content -> . UNWORD identifier_content

    EQUALS          shift and go to state 35
    CMP_LT          shift and go to state 22
    CMP_GT          shift and go to state 15
    THAN            shift and go to state 24
    NUMERIC_CONSTANT shift and go to state 5
    UNWORD          shift and go to state 7

    numeric_expression             shift and go to state 37
    numeric_const                  shift and go to state 6
    inequality                     shift and go to state 36
    identifier                     shift and go to state 11
    identifier_content             shift and go to state 9

state 19

    (20) numeric_expression -> numeric_expression TIMES . numeric_expression
    (18) numeric_expression -> . numeric_expression PLUS numeric_expression
    (19) numeric_expression -> . numeric_expression MINUS numeric_expression
    (20) numeric_expression -> . numeric_expression TIMES numeric_expression
    (21) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (22) numeric_expression -> . numeric_expression POWER numeric_expression
    (23) numeric_expression -> . numeric_expression MOD numeric_expression
    (24) numeric_expression -> . identifier
    (25) numeric_expression -> . numeric_const
    (27) identifier -> . identifier_content
    (26) numeric_const -> . NUMERIC_CONSTANT
    (28) identifier_content -> . UNWORD
    (29) identifier_content -> . UNWORD identifier_content

    NUMERIC_CONSTANT shift and go to state 5
    UNWORD          shift and go to state 7

    numeric_expression             shift and go to state 38
    numeric_const                  shift and go to state 6
    identifier                     shift and go to state 11
    identifier_content             shift and go to state 9

state 20

    (7) proposition -> numeric_expression inequality . numeric_expression
    (10) inequality -> inequality . OR EQUALS
    (11) inequality -> inequality . OR EQUALS TO
    (18) numeric_expression -> . numeric_expression PLUS numeric_expression
    (19) numeric_expression -> . numeric_expression MINUS numeric_expression
    (20) numeric_expression -> . numeric_expression TIMES numeric_expression
    (21) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (22) numeric_expression -> . numeric_expression POWER numeric_expression
    (23) numeric_expression -> . numeric_expression MOD numeric_expression
    (24) numeric_expression -> . identifier
    (25) numeric_expression -> . numeric_const
    (27) identifier -> . identifier_content
    (26) numeric_const -> . NUMERIC_CONSTANT
    (28) identifier_content -> . UNWORD
    (29) identifier_content -> . UNWORD identifier_content

    OR              shift and go to state 40
    NUMERIC_CONSTANT shift and go to state 5
    UNWORD          shift and go to state 7

    numeric_expression             shift and go to state 39
    numeric_const                  shift and go to state 6
    identifier                     shift and go to state 11
    identifier_content             shift and go to state 9

state 21

    (18) numeric_expression -> numeric_expression PLUS . numeric_expression
    (18) numeric_expression -> . numeric_expression PLUS numeric_expression
    (19) numeric_expression -> . numeric_expression MINUS numeric_expression
    (20) numeric_expression -> . numeric_expression TIMES numeric_expression
    (21) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (22) numeric_expression -> . numeric_expression POWER numeric_expression
    (23) numeric_expression -> . numeric_expression MOD numeric_expression
    (24) numeric_expression -> . identifier
    (25) numeric_expression -> . numeric_const
    (27) identifier -> . identifier_content
    (26) numeric_const -> . NUMERIC_CONSTANT
    (28) identifier_content -> . UNWORD
    (29) identifier_content -> . UNWORD identifier_content

    NUMERIC_CONSTANT shift and go to state 5
    UNWORD          shift and go to state 7

    numeric_expression             shift and go to state 41
    numeric_const                  shift and go to state 6
    identifier                     shift and go to state 11
    identifier_content             shift and go to state 9

state 22

    (13) inequality -> CMP_LT .
    (16) inequality -> CMP_LT . THAN

    OR              reduce using rule 13 (inequality -> CMP_LT .)
    NUMERIC_CONSTANT reduce using rule 13 (inequality -> CMP_LT .)
    UNWORD          reduce using rule 13 (inequality -> CMP_LT .)
    THAN            shift and go to state 42


state 23

    (23) numeric_expression -> numeric_expression MOD . numeric_expression
    (18) numeric_expression -> . numeric_expression PLUS numeric_expression
    (19) numeric_expression -> . numeric_expression MINUS numeric_expression
    (20) numeric_expression -> . numeric_expression TIMES numeric_expression
    (21) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (22) numeric_expression -> . numeric_expression POWER numeric_expression
    (23) numeric_expression -> . numeric_expression MOD numeric_expression
    (24) numeric_expression -> . identifier
    (25) numeric_expression -> . numeric_const
    (27) identifier -> . identifier_content
    (26) numeric_const -> . NUMERIC_CONSTANT
    (28) identifier_content -> . UNWORD
    (29) identifier_content -> . UNWORD identifier_content

    NUMERIC_CONSTANT shift and go to state 5
    UNWORD          shift and go to state 7

    numeric_expression             shift and go to state 43
    numeric_const                  shift and go to state 6
    identifier                     shift and go to state 11
    identifier_content             shift and go to state 9

state 24

    (15) inequality -> THAN .

    OR              reduce using rule 15 (inequality -> THAN .)
    NUMERIC_CONSTANT reduce using rule 15 (inequality -> THAN .)
    UNWORD          reduce using rule 15 (inequality -> THAN .)


state 25

    (19) numeric_expression -> numeric_expression MINUS . numeric_expression
    (18) numeric_expression -> . numeric_expression PLUS numeric_expression
    (19) numeric_expression -> . numeric_expression MINUS numeric_expression
    (20) numeric_expression -> . numeric_expression TIMES numeric_expression
    (21) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (22) numeric_expression -> . numeric_expression POWER numeric_expression
    (23) numeric_expression -> . numeric_expression MOD numeric_expression
    (24) numeric_expression -> . identifier
    (25) numeric_expression -> . numeric_const
    (27) identifier -> . identifier_content
    (26) numeric_const -> . NUMERIC_CONSTANT
    (28) identifier_content -> . UNWORD
    (29) identifier_content -> . UNWORD identifier_content

    NUMERIC_CONSTANT shift and go to state 5
    UNWORD          shift and go to state 7

    numeric_expression             shift and go to state 44
    numeric_const                  shift and go to state 6
    identifier                     shift and go to state 11
    identifier_content             shift and go to state 9

state 26

    (8) proposition -> numeric_expression EVENLY .

    THEN            reduce using rule 8 (proposition -> numeric_expression EVENLY .)
    AND             reduce using rule 8 (proposition -> numeric_expression EVENLY .)
    OR              reduce using rule 8 (proposition -> numeric_expression EVENLY .)
    $end            reduce using rule 8 (proposition -> numeric_expression EVENLY .)


state 27

    (29) identifier_content -> UNWORD identifier_content .

    PLUS            reduce using rule 29 (identifier_content -> UNWORD identifier_content .)
    MINUS           reduce using rule 29 (identifier_content -> UNWORD identifier_content .)
    TIMES           reduce using rule 29 (identifier_content -> UNWORD identifier_content .)
    DIVIDE          reduce using rule 29 (identifier_content -> UNWORD identifier_content .)
    POWER           reduce using rule 29 (identifier_content -> UNWORD identifier_content .)
    MOD             reduce using rule 29 (identifier_content -> UNWORD identifier_content .)
    EQUALS          reduce using rule 29 (identifier_content -> UNWORD identifier_content .)
    EVENLY          reduce using rule 29 (identifier_content -> UNWORD identifier_content .)
    CMP_LT          reduce using rule 29 (identifier_content -> UNWORD identifier_content .)
    CMP_GT          reduce using rule 29 (identifier_content -> UNWORD identifier_content .)
    THAN            reduce using rule 29 (identifier_content -> UNWORD identifier_content .)
    THEN            reduce using rule 29 (identifier_content -> UNWORD identifier_content .)
    AND             reduce using rule 29 (identifier_content -> UNWORD identifier_content .)
    OR              reduce using rule 29 (identifier_content -> UNWORD identifier_content .)
    $end            reduce using rule 29 (identifier_content -> UNWORD identifier_content .)


state 28

    (4) proposition -> NOT proposition .
    (2) proposition -> proposition . AND proposition
    (3) proposition -> proposition . OR proposition

    THEN            reduce using rule 4 (proposition -> NOT proposition .)
    AND             reduce using rule 4 (proposition -> NOT proposition .)
    OR              reduce using rule 4 (proposition -> NOT proposition .)
    $end            reduce using rule 4 (proposition -> NOT proposition .)

  ! AND             [ shift and go to state 12 ]
  ! OR              [ shift and go to state 14 ]


state 29

    (2) proposition -> proposition AND proposition .
    (2) proposition -> proposition . AND proposition
    (3) proposition -> proposition . OR proposition

    THEN            reduce using rule 2 (proposition -> proposition AND proposition .)
    AND             reduce using rule 2 (proposition -> proposition AND proposition .)
    OR              reduce using rule 2 (proposition -> proposition AND proposition .)
    $end            reduce using rule 2 (proposition -> proposition AND proposition .)

  ! AND             [ shift and go to state 12 ]
  ! OR              [ shift and go to state 14 ]


state 30

    (1) back_utilization -> IF proposition THEN proposition .
    (2) proposition -> proposition . AND proposition
    (3) proposition -> proposition . OR proposition

    $end            reduce using rule 1 (back_utilization -> IF proposition THEN proposition .)
    AND             shift and go to state 12
    OR              shift and go to state 14


state 31

    (3) proposition -> proposition OR proposition .
    (2) proposition -> proposition . AND proposition
    (3) proposition -> proposition . OR proposition

    THEN            reduce using rule 3 (proposition -> proposition OR proposition .)
    AND             reduce using rule 3 (proposition -> proposition OR proposition .)
    OR              reduce using rule 3 (proposition -> proposition OR proposition .)
    $end            reduce using rule 3 (proposition -> proposition OR proposition .)

  ! AND             [ shift and go to state 12 ]
  ! OR              [ shift and go to state 14 ]


state 32

    (17) inequality -> CMP_GT THAN .

    OR              reduce using rule 17 (inequality -> CMP_GT THAN .)
    NUMERIC_CONSTANT reduce using rule 17 (inequality -> CMP_GT THAN .)
    UNWORD          reduce using rule 17 (inequality -> CMP_GT THAN .)


state 33

    (21) numeric_expression -> numeric_expression DIVIDE numeric_expression .
    (18) numeric_expression -> numeric_expression . PLUS numeric_expression
    (19) numeric_expression -> numeric_expression . MINUS numeric_expression
    (20) numeric_expression -> numeric_expression . TIMES numeric_expression
    (21) numeric_expression -> numeric_expression . DIVIDE numeric_expression
    (22) numeric_expression -> numeric_expression . POWER numeric_expression
    (23) numeric_expression -> numeric_expression . MOD numeric_expression

    PLUS            reduce using rule 21 (numeric_expression -> numeric_expression DIVIDE numeric_expression .)
    MINUS           reduce using rule 21 (numeric_expression -> numeric_expression DIVIDE numeric_expression .)
    TIMES           reduce using rule 21 (numeric_expression -> numeric_expression DIVIDE numeric_expression .)
    DIVIDE          reduce using rule 21 (numeric_expression -> numeric_expression DIVIDE numeric_expression .)
    MOD             reduce using rule 21 (numeric_expression -> numeric_expression DIVIDE numeric_expression .)
    EQUALS          reduce using rule 21 (numeric_expression -> numeric_expression DIVIDE numeric_expression .)
    EVENLY          reduce using rule 21 (numeric_expression -> numeric_expression DIVIDE numeric_expression .)
    CMP_LT          reduce using rule 21 (numeric_expression -> numeric_expression DIVIDE numeric_expression .)
    CMP_GT          reduce using rule 21 (numeric_expression -> numeric_expression DIVIDE numeric_expression .)
    THAN            reduce using rule 21 (numeric_expression -> numeric_expression DIVIDE numeric_expression .)
    THEN            reduce using rule 21 (numeric_expression -> numeric_expression DIVIDE numeric_expression .)
    AND             reduce using rule 21 (numeric_expression -> numeric_expression DIVIDE numeric_expression .)
    OR              reduce using rule 21 (numeric_expression -> numeric_expression DIVIDE numeric_expression .)
    $end            reduce using rule 21 (numeric_expression -> numeric_expression DIVIDE numeric_expression .)
    POWER           shift and go to state 17

  ! POWER           [ reduce using rule 21 (numeric_expression -> numeric_expression DIVIDE numeric_expression .) ]
  ! PLUS            [ shift and go to state 21 ]
  ! MINUS           [ shift and go to state 25 ]
  ! TIMES           [ shift and go to state 19 ]
  ! DIVIDE          [ shift and go to state 16 ]
  ! MOD             [ shift and go to state 23 ]


state 34

    (22) numeric_expression -> numeric_expression POWER numeric_expression .
    (18) numeric_expression -> numeric_expression . PLUS numeric_expression
    (19) numeric_expression -> numeric_expression . MINUS numeric_expression
    (20) numeric_expression -> numeric_expression . TIMES numeric_expression
    (21) numeric_expression -> numeric_expression . DIVIDE numeric_expression
    (22) numeric_expression -> numeric_expression . POWER numeric_expression
    (23) numeric_expression -> numeric_expression . MOD numeric_expression

    PLUS            reduce using rule 22 (numeric_expression -> numeric_expression POWER numeric_expression .)
    MINUS           reduce using rule 22 (numeric_expression -> numeric_expression POWER numeric_expression .)
    TIMES           reduce using rule 22 (numeric_expression -> numeric_expression POWER numeric_expression .)
    DIVIDE          reduce using rule 22 (numeric_expression -> numeric_expression POWER numeric_expression .)
    MOD             reduce using rule 22 (numeric_expression -> numeric_expression POWER numeric_expression .)
    EQUALS          reduce using rule 22 (numeric_expression -> numeric_expression POWER numeric_expression .)
    EVENLY          reduce using rule 22 (numeric_expression -> numeric_expression POWER numeric_expression .)
    CMP_LT          reduce using rule 22 (numeric_expression -> numeric_expression POWER numeric_expression .)
    CMP_GT          reduce using rule 22 (numeric_expression -> numeric_expression POWER numeric_expression .)
    THAN            reduce using rule 22 (numeric_expression -> numeric_expression POWER numeric_expression .)
    THEN            reduce using rule 22 (numeric_expression -> numeric_expression POWER numeric_expression .)
    AND             reduce using rule 22 (numeric_expression -> numeric_expression POWER numeric_expression .)
    OR              reduce using rule 22 (numeric_expression -> numeric_expression POWER numeric_expression .)
    $end            reduce using rule 22 (numeric_expression -> numeric_expression POWER numeric_expression .)
    POWER           shift and go to state 17

  ! POWER           [ reduce using rule 22 (numeric_expression -> numeric_expression POWER numeric_expression .) ]
  ! PLUS            [ shift and go to state 21 ]
  ! MINUS           [ shift and go to state 25 ]
  ! TIMES           [ shift and go to state 19 ]
  ! DIVIDE          [ shift and go to state 16 ]
  ! MOD             [ shift and go to state 23 ]


state 35

    (5) proposition -> numeric_expression EQUALS EQUALS . numeric_expression
    (12) inequality -> EQUALS . inequality
    (18) numeric_expression -> . numeric_expression PLUS numeric_expression
    (19) numeric_expression -> . numeric_expression MINUS numeric_expression
    (20) numeric_expression -> . numeric_expression TIMES numeric_expression
    (21) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (22) numeric_expression -> . numeric_expression POWER numeric_expression
    (23) numeric_expression -> . numeric_expression MOD numeric_expression
    (24) numeric_expression -> . identifier
    (25) numeric_expression -> . numeric_const
    (10) inequality -> . inequality OR EQUALS
    (11) inequality -> . inequality OR EQUALS TO
    (12) inequality -> . EQUALS inequality
    (13) inequality -> . CMP_LT
    (14) inequality -> . CMP_GT
    (15) inequality -> . THAN
    (16) inequality -> . CMP_LT THAN
    (17) inequality -> . CMP_GT THAN
    (27) identifier -> . identifier_content
    (26) numeric_const -> . NUMERIC_CONSTANT
    (28) identifier_content -> . UNWORD
    (29) identifier_content -> . UNWORD identifier_content

    EQUALS          shift and go to state 45
    CMP_LT          shift and go to state 22
    CMP_GT          shift and go to state 15
    THAN            shift and go to state 24
    NUMERIC_CONSTANT shift and go to state 5
    UNWORD          shift and go to state 7

    numeric_expression             shift and go to state 46
    numeric_const                  shift and go to state 6
    inequality                     shift and go to state 36
    identifier                     shift and go to state 11
    identifier_content             shift and go to state 9

state 36

    (12) inequality -> EQUALS inequality .
    (10) inequality -> inequality . OR EQUALS
    (11) inequality -> inequality . OR EQUALS TO

    NUMERIC_CONSTANT reduce using rule 12 (inequality -> EQUALS inequality .)
    UNWORD          reduce using rule 12 (inequality -> EQUALS inequality .)
    OR              shift and go to state 40

  ! OR              [ reduce using rule 12 (inequality -> EQUALS inequality .) ]


state 37

    (6) proposition -> numeric_expression EQUALS numeric_expression .
    (18) numeric_expression -> numeric_expression . PLUS numeric_expression
    (19) numeric_expression -> numeric_expression . MINUS numeric_expression
    (20) numeric_expression -> numeric_expression . TIMES numeric_expression
    (21) numeric_expression -> numeric_expression . DIVIDE numeric_expression
    (22) numeric_expression -> numeric_expression . POWER numeric_expression
    (23) numeric_expression -> numeric_expression . MOD numeric_expression

    THEN            reduce using rule 6 (proposition -> numeric_expression EQUALS numeric_expression .)
    AND             reduce using rule 6 (proposition -> numeric_expression EQUALS numeric_expression .)
    OR              reduce using rule 6 (proposition -> numeric_expression EQUALS numeric_expression .)
    $end            reduce using rule 6 (proposition -> numeric_expression EQUALS numeric_expression .)
    PLUS            shift and go to state 21
    MINUS           shift and go to state 25
    TIMES           shift and go to state 19
    DIVIDE          shift and go to state 16
    POWER           shift and go to state 17
    MOD             shift and go to state 23


state 38

    (20) numeric_expression -> numeric_expression TIMES numeric_expression .
    (18) numeric_expression -> numeric_expression . PLUS numeric_expression
    (19) numeric_expression -> numeric_expression . MINUS numeric_expression
    (20) numeric_expression -> numeric_expression . TIMES numeric_expression
    (21) numeric_expression -> numeric_expression . DIVIDE numeric_expression
    (22) numeric_expression -> numeric_expression . POWER numeric_expression
    (23) numeric_expression -> numeric_expression . MOD numeric_expression

    PLUS            reduce using rule 20 (numeric_expression -> numeric_expression TIMES numeric_expression .)
    MINUS           reduce using rule 20 (numeric_expression -> numeric_expression TIMES numeric_expression .)
    TIMES           reduce using rule 20 (numeric_expression -> numeric_expression TIMES numeric_expression .)
    DIVIDE          reduce using rule 20 (numeric_expression -> numeric_expression TIMES numeric_expression .)
    MOD             reduce using rule 20 (numeric_expression -> numeric_expression TIMES numeric_expression .)
    EQUALS          reduce using rule 20 (numeric_expression -> numeric_expression TIMES numeric_expression .)
    EVENLY          reduce using rule 20 (numeric_expression -> numeric_expression TIMES numeric_expression .)
    CMP_LT          reduce using rule 20 (numeric_expression -> numeric_expression TIMES numeric_expression .)
    CMP_GT          reduce using rule 20 (numeric_expression -> numeric_expression TIMES numeric_expression .)
    THAN            reduce using rule 20 (numeric_expression -> numeric_expression TIMES numeric_expression .)
    THEN            reduce using rule 20 (numeric_expression -> numeric_expression TIMES numeric_expression .)
    AND             reduce using rule 20 (numeric_expression -> numeric_expression TIMES numeric_expression .)
    OR              reduce using rule 20 (numeric_expression -> numeric_expression TIMES numeric_expression .)
    $end            reduce using rule 20 (numeric_expression -> numeric_expression TIMES numeric_expression .)
    POWER           shift and go to state 17

  ! POWER           [ reduce using rule 20 (numeric_expression -> numeric_expression TIMES numeric_expression .) ]
  ! PLUS            [ shift and go to state 21 ]
  ! MINUS           [ shift and go to state 25 ]
  ! TIMES           [ shift and go to state 19 ]
  ! DIVIDE          [ shift and go to state 16 ]
  ! MOD             [ shift and go to state 23 ]


state 39

    (7) proposition -> numeric_expression inequality numeric_expression .
    (18) numeric_expression -> numeric_expression . PLUS numeric_expression
    (19) numeric_expression -> numeric_expression . MINUS numeric_expression
    (20) numeric_expression -> numeric_expression . TIMES numeric_expression
    (21) numeric_expression -> numeric_expression . DIVIDE numeric_expression
    (22) numeric_expression -> numeric_expression . POWER numeric_expression
    (23) numeric_expression -> numeric_expression . MOD numeric_expression

    THEN            reduce using rule 7 (proposition -> numeric_expression inequality numeric_expression .)
    AND             reduce using rule 7 (proposition -> numeric_expression inequality numeric_expression .)
    OR              reduce using rule 7 (proposition -> numeric_expression inequality numeric_expression .)
    $end            reduce using rule 7 (proposition -> numeric_expression inequality numeric_expression .)
    PLUS            shift and go to state 21
    MINUS           shift and go to state 25
    TIMES           shift and go to state 19
    DIVIDE          shift and go to state 16
    POWER           shift and go to state 17
    MOD             shift and go to state 23


state 40

    (10) inequality -> inequality OR . EQUALS
    (11) inequality -> inequality OR . EQUALS TO

    EQUALS          shift and go to state 47


state 41

    (18) numeric_expression -> numeric_expression PLUS numeric_expression .
    (18) numeric_expression -> numeric_expression . PLUS numeric_expression
    (19) numeric_expression -> numeric_expression . MINUS numeric_expression
    (20) numeric_expression -> numeric_expression . TIMES numeric_expression
    (21) numeric_expression -> numeric_expression . DIVIDE numeric_expression
    (22) numeric_expression -> numeric_expression . POWER numeric_expression
    (23) numeric_expression -> numeric_expression . MOD numeric_expression

    PLUS            reduce using rule 18 (numeric_expression -> numeric_expression PLUS numeric_expression .)
    MINUS           reduce using rule 18 (numeric_expression -> numeric_expression PLUS numeric_expression .)
    MOD             reduce using rule 18 (numeric_expression -> numeric_expression PLUS numeric_expression .)
    EQUALS          reduce using rule 18 (numeric_expression -> numeric_expression PLUS numeric_expression .)
    EVENLY          reduce using rule 18 (numeric_expression -> numeric_expression PLUS numeric_expression .)
    CMP_LT          reduce using rule 18 (numeric_expression -> numeric_expression PLUS numeric_expression .)
    CMP_GT          reduce using rule 18 (numeric_expression -> numeric_expression PLUS numeric_expression .)
    THAN            reduce using rule 18 (numeric_expression -> numeric_expression PLUS numeric_expression .)
    THEN            reduce using rule 18 (numeric_expression -> numeric_expression PLUS numeric_expression .)
    AND             reduce using rule 18 (numeric_expression -> numeric_expression PLUS numeric_expression .)
    OR              reduce using rule 18 (numeric_expression -> numeric_expression PLUS numeric_expression .)
    $end            reduce using rule 18 (numeric_expression -> numeric_expression PLUS numeric_expression .)
    TIMES           shift and go to state 19
    DIVIDE          shift and go to state 16
    POWER           shift and go to state 17

  ! TIMES           [ reduce using rule 18 (numeric_expression -> numeric_expression PLUS numeric_expression .) ]
  ! DIVIDE          [ reduce using rule 18 (numeric_expression -> numeric_expression PLUS numeric_expression .) ]
  ! POWER           [ reduce using rule 18 (numeric_expression -> numeric_expression PLUS numeric_expression .) ]
  ! PLUS            [ shift and go to state 21 ]
  ! MINUS           [ shift and go to state 25 ]
  ! MOD             [ shift and go to state 23 ]


state 42

    (16) inequality -> CMP_LT THAN .

    OR              reduce using rule 16 (inequality -> CMP_LT THAN .)
    NUMERIC_CONSTANT reduce using rule 16 (inequality -> CMP_LT THAN .)
    UNWORD          reduce using rule 16 (inequality -> CMP_LT THAN .)


state 43

    (23) numeric_expression -> numeric_expression MOD numeric_expression .
    (18) numeric_expression -> numeric_expression . PLUS numeric_expression
    (19) numeric_expression -> numeric_expression . MINUS numeric_expression
    (20) numeric_expression -> numeric_expression . TIMES numeric_expression
    (21) numeric_expression -> numeric_expression . DIVIDE numeric_expression
    (22) numeric_expression -> numeric_expression . POWER numeric_expression
    (23) numeric_expression -> numeric_expression . MOD numeric_expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    EQUALS          reduce using rule 23 (numeric_expression -> numeric_expression MOD numeric_expression .)
    EVENLY          reduce using rule 23 (numeric_expression -> numeric_expression MOD numeric_expression .)
    CMP_LT          reduce using rule 23 (numeric_expression -> numeric_expression MOD numeric_expression .)
    CMP_GT          reduce using rule 23 (numeric_expression -> numeric_expression MOD numeric_expression .)
    THAN            reduce using rule 23 (numeric_expression -> numeric_expression MOD numeric_expression .)
    THEN            reduce using rule 23 (numeric_expression -> numeric_expression MOD numeric_expression .)
    AND             reduce using rule 23 (numeric_expression -> numeric_expression MOD numeric_expression .)
    OR              reduce using rule 23 (numeric_expression -> numeric_expression MOD numeric_expression .)
    $end            reduce using rule 23 (numeric_expression -> numeric_expression MOD numeric_expression .)
    PLUS            shift and go to state 21
    MINUS           shift and go to state 25
    TIMES           shift and go to state 19
    DIVIDE          shift and go to state 16
    POWER           shift and go to state 17
    MOD             shift and go to state 23

  ! PLUS            [ reduce using rule 23 (numeric_expression -> numeric_expression MOD numeric_expression .) ]
  ! MINUS           [ reduce using rule 23 (numeric_expression -> numeric_expression MOD numeric_expression .) ]
  ! TIMES           [ reduce using rule 23 (numeric_expression -> numeric_expression MOD numeric_expression .) ]
  ! DIVIDE          [ reduce using rule 23 (numeric_expression -> numeric_expression MOD numeric_expression .) ]
  ! POWER           [ reduce using rule 23 (numeric_expression -> numeric_expression MOD numeric_expression .) ]
  ! MOD             [ reduce using rule 23 (numeric_expression -> numeric_expression MOD numeric_expression .) ]


state 44

    (19) numeric_expression -> numeric_expression MINUS numeric_expression .
    (18) numeric_expression -> numeric_expression . PLUS numeric_expression
    (19) numeric_expression -> numeric_expression . MINUS numeric_expression
    (20) numeric_expression -> numeric_expression . TIMES numeric_expression
    (21) numeric_expression -> numeric_expression . DIVIDE numeric_expression
    (22) numeric_expression -> numeric_expression . POWER numeric_expression
    (23) numeric_expression -> numeric_expression . MOD numeric_expression

    PLUS            reduce using rule 19 (numeric_expression -> numeric_expression MINUS numeric_expression .)
    MINUS           reduce using rule 19 (numeric_expression -> numeric_expression MINUS numeric_expression .)
    MOD             reduce using rule 19 (numeric_expression -> numeric_expression MINUS numeric_expression .)
    EQUALS          reduce using rule 19 (numeric_expression -> numeric_expression MINUS numeric_expression .)
    EVENLY          reduce using rule 19 (numeric_expression -> numeric_expression MINUS numeric_expression .)
    CMP_LT          reduce using rule 19 (numeric_expression -> numeric_expression MINUS numeric_expression .)
    CMP_GT          reduce using rule 19 (numeric_expression -> numeric_expression MINUS numeric_expression .)
    THAN            reduce using rule 19 (numeric_expression -> numeric_expression MINUS numeric_expression .)
    THEN            reduce using rule 19 (numeric_expression -> numeric_expression MINUS numeric_expression .)
    AND             reduce using rule 19 (numeric_expression -> numeric_expression MINUS numeric_expression .)
    OR              reduce using rule 19 (numeric_expression -> numeric_expression MINUS numeric_expression .)
    $end            reduce using rule 19 (numeric_expression -> numeric_expression MINUS numeric_expression .)
    TIMES           shift and go to state 19
    DIVIDE          shift and go to state 16
    POWER           shift and go to state 17

  ! TIMES           [ reduce using rule 19 (numeric_expression -> numeric_expression MINUS numeric_expression .) ]
  ! DIVIDE          [ reduce using rule 19 (numeric_expression -> numeric_expression MINUS numeric_expression .) ]
  ! POWER           [ reduce using rule 19 (numeric_expression -> numeric_expression MINUS numeric_expression .) ]
  ! PLUS            [ shift and go to state 21 ]
  ! MINUS           [ shift and go to state 25 ]
  ! MOD             [ shift and go to state 23 ]


state 45

    (12) inequality -> EQUALS . inequality
    (10) inequality -> . inequality OR EQUALS
    (11) inequality -> . inequality OR EQUALS TO
    (12) inequality -> . EQUALS inequality
    (13) inequality -> . CMP_LT
    (14) inequality -> . CMP_GT
    (15) inequality -> . THAN
    (16) inequality -> . CMP_LT THAN
    (17) inequality -> . CMP_GT THAN

    EQUALS          shift and go to state 45
    CMP_LT          shift and go to state 22
    CMP_GT          shift and go to state 15
    THAN            shift and go to state 24

    inequality                     shift and go to state 36

state 46

    (5) proposition -> numeric_expression EQUALS EQUALS numeric_expression .
    (18) numeric_expression -> numeric_expression . PLUS numeric_expression
    (19) numeric_expression -> numeric_expression . MINUS numeric_expression
    (20) numeric_expression -> numeric_expression . TIMES numeric_expression
    (21) numeric_expression -> numeric_expression . DIVIDE numeric_expression
    (22) numeric_expression -> numeric_expression . POWER numeric_expression
    (23) numeric_expression -> numeric_expression . MOD numeric_expression

    THEN            reduce using rule 5 (proposition -> numeric_expression EQUALS EQUALS numeric_expression .)
    AND             reduce using rule 5 (proposition -> numeric_expression EQUALS EQUALS numeric_expression .)
    OR              reduce using rule 5 (proposition -> numeric_expression EQUALS EQUALS numeric_expression .)
    $end            reduce using rule 5 (proposition -> numeric_expression EQUALS EQUALS numeric_expression .)
    PLUS            shift and go to state 21
    MINUS           shift and go to state 25
    TIMES           shift and go to state 19
    DIVIDE          shift and go to state 16
    POWER           shift and go to state 17
    MOD             shift and go to state 23


state 47

    (10) inequality -> inequality OR EQUALS .
    (11) inequality -> inequality OR EQUALS . TO

    OR              reduce using rule 10 (inequality -> inequality OR EQUALS .)
    NUMERIC_CONSTANT reduce using rule 10 (inequality -> inequality OR EQUALS .)
    UNWORD          reduce using rule 10 (inequality -> inequality OR EQUALS .)
    TO              shift and go to state 48


state 48

    (11) inequality -> inequality OR EQUALS TO .

    OR              reduce using rule 11 (inequality -> inequality OR EQUALS TO .)
    NUMERIC_CONSTANT reduce using rule 11 (inequality -> inequality OR EQUALS TO .)
    UNWORD          reduce using rule 11 (inequality -> inequality OR EQUALS TO .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 43 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 43 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 43 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 43 resolved as shift
WARNING: shift/reduce conflict for POWER in state 43 resolved as shift
WARNING: shift/reduce conflict for MOD in state 43 resolved as shift
