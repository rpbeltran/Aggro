
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQUALSCMP_LTCMP_GTleftANDORleftPLUSMINUSleftTIMESDIVIDErightPOWERnonassocNOTA AND BY CMP_GT CMP_LT DIVIDE DIVIDES DOES ELSE EQUALS EVENLY FALSE IF IMPLIES MINUS MOD NOT NUMERIC_CONSTANT OR OTHERWISE PLUS POWER SENTENCE_END THAN THE THEN TIMES TO TRUE UNWORDprogram : sentence\n               | sentence program\n    sentence : proposition SENTENCE_ENDsentence : EQUALS proposition SENTENCE_END \n                | DOES   proposition SENTENCE_END\n                | EQUALS numeric_expression numeric_expression SENTENCE_END\n    sentence : EQUALS identifier SENTENCE_END\n                | DOES   identifier SENTENCE_END\n    sentence : proposition IF proposition SENTENCE_ENDsentence : proposition IMPLIES proposition SENTENCE_ENDsentence : IF proposition THEN proposition SENTENCE_ENDproposition : proposition AND proposition\n                   | NOT proposition\n    proposition : proposition OR proposition\n    proposition : numeric_expression DIVIDES numeric_expression \n                   | numeric_expression DIVIDES numeric_expression EVENLY\n     proposition : numeric_expression NOT DIVIDE numeric_expression\n                    | numeric_expression NOT DIVIDE numeric_expression EVENLY\n     proposition : numeric_expression DOES NOT DIVIDE numeric_expression\n                    | numeric_expression DOES NOT DIVIDE numeric_expression EVENLY\n    proposition : numeric_expression EQUALS EQUALS numeric_expression\n                   | numeric_expression EQUALS numeric_expression\n                   | TRUE\n    proposition : numeric_expression inequality numeric_expression\n                   | FALSE\n    inequality : inequality OR EQUALS\n                  | inequality OR EQUALS TOinequality : EQUALS inequality\n    inequality : CMP_LT\n                  | CMP_GT\n                  | THAN\n                  | CMP_LT THAN\n                  | CMP_GT THANnumeric_expression : numeric_expression PLUS numeric_expression numeric_expression : numeric_expression MINUS numeric_expression numeric_expression : numeric_expression TIMES numeric_expression\n                          | numeric_expression TIMES BY numeric_expression\n    numeric_expression : numeric_expression DIVIDE numeric_expression\n                          | numeric_expression DIVIDE BY numeric_expression\n    numeric_expression : numeric_expression POWER numeric_expression numeric_expression : numeric_expression MOD numeric_expression numeric_expression : identifier\n                          | numeric_const\n    numeric_const : NUMERIC_CONSTANTidentifier :   identifier_content\n                  | A identifier_content\n    identifier : THE identifier_contentidentifier_content : UNWORD\n                          | UNWORD identifier_content\n    '
    
_lr_action_items = {'THEN':([4,6,10,11,14,15,17,38,44,45,46,47,48,50,54,56,57,60,63,64,65,67,69,78,79,81,83,85,88,89,92,],[-23,-43,-44,-48,-25,-45,-42,-46,-49,-47,75,-13,-12,-14,-38,-40,-22,-35,-34,-41,-36,-24,-15,-39,-21,-17,-37,-16,-18,-19,-20,]),'CMP_LT':([3,6,10,11,15,17,28,38,40,42,43,44,45,54,56,58,60,63,64,65,78,80,83,],[25,-43,-44,-48,-45,-42,25,-46,-42,25,-42,-49,-47,-38,-40,25,-35,-34,-41,-36,-39,25,-37,]),'TRUE':([0,1,8,9,13,16,19,20,21,22,23,70,71,72,74,75,76,77,86,91,],[4,4,4,4,4,4,4,4,-3,4,4,-5,-8,-4,-7,4,-10,-9,-6,-11,]),'MINUS':([3,6,10,11,15,17,38,40,42,43,44,45,54,56,57,60,63,64,65,67,69,73,78,79,81,83,89,],[30,-43,-44,-48,-45,-42,-46,-42,30,-42,-49,-47,-38,-40,30,-35,-34,30,-36,30,30,30,30,30,30,30,30,]),'CMP_GT':([3,6,10,11,15,17,28,38,40,42,43,44,45,54,56,58,60,63,64,65,78,80,83,],[24,-43,-44,-48,-45,-42,24,-46,-42,24,-42,-49,-47,-38,-40,24,-35,-34,-41,-36,-39,24,-37,]),'POWER':([3,6,10,11,15,17,38,40,42,43,44,45,54,56,57,60,63,64,65,67,69,73,78,79,81,83,89,],[27,-43,-44,-48,-45,-42,-46,-42,27,-42,-49,-47,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'SENTENCE_END':([2,4,6,10,11,14,15,17,38,39,40,41,43,44,45,47,48,49,50,51,54,56,57,60,63,64,65,67,69,73,78,79,81,83,85,87,88,89,92,],[21,-23,-43,-44,-48,-25,-45,-42,-46,70,71,72,74,-49,-47,-13,-12,76,-14,77,-38,-40,-22,-35,-34,-41,-36,-24,-15,86,-39,-21,-17,-37,-16,91,-18,-19,-20,]),'THAN':([3,6,10,11,15,17,24,25,28,38,40,42,43,44,45,54,56,58,60,63,64,65,78,80,83,],[29,-43,-44,-48,-45,-42,52,53,29,-46,-42,29,-42,-49,-47,-38,-40,29,-35,-34,-41,-36,-39,29,-37,]),'TO':([84,],[90,]),'PLUS':([3,6,10,11,15,17,38,40,42,43,44,45,54,56,57,60,63,64,65,67,69,73,78,79,81,83,89,],[33,-43,-44,-48,-45,-42,-46,-42,33,-42,-49,-47,-38,-40,33,-35,-34,33,-36,33,33,33,33,33,33,33,33,]),'NUMERIC_CONSTANT':([0,1,6,8,9,10,11,13,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,33,34,35,36,37,38,42,43,44,45,52,53,54,55,56,58,59,60,61,63,64,65,66,70,71,72,74,75,76,77,78,82,83,84,86,90,91,],[10,10,-43,10,10,-44,-48,10,-45,10,-42,10,10,-3,10,10,-30,-29,10,10,10,-31,10,10,10,10,10,10,-46,10,-42,-49,-47,-33,-32,-38,10,-40,10,-28,-35,10,-34,-41,-36,10,-5,-8,-4,-7,10,-10,-9,-39,10,-37,-26,-6,-27,-11,]),'$end':([1,5,18,21,70,71,72,74,76,77,86,91,],[-1,0,-2,-3,-5,-8,-4,-7,-10,-9,-6,-11,]),'A':([0,1,6,8,9,10,11,13,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,33,34,35,36,37,38,42,43,44,45,52,53,54,55,56,58,59,60,61,63,64,65,66,70,71,72,74,75,76,77,78,82,83,84,86,90,91,],[7,7,-43,7,7,-44,-48,7,-45,7,-42,7,7,-3,7,7,-30,-29,7,7,7,-31,7,7,7,7,7,7,-46,7,-42,-49,-47,-33,-32,-38,7,-40,7,-28,-35,7,-34,-41,-36,7,-5,-8,-4,-7,7,-10,-9,-39,7,-37,-26,-6,-27,-11,]),'IMPLIES':([2,4,6,10,11,14,15,17,38,44,45,47,48,50,54,56,57,60,63,64,65,67,69,78,79,81,83,85,88,89,92,],[20,-23,-43,-44,-48,-25,-45,-42,-46,-49,-47,-13,-12,-14,-38,-40,-22,-35,-34,-41,-36,-24,-15,-39,-21,-17,-37,-16,-18,-19,-20,]),'DIVIDE':([3,6,10,11,15,17,31,38,40,42,43,44,45,54,56,57,60,62,63,64,65,67,69,73,78,79,81,83,89,],[26,-43,-44,-48,-45,-42,61,-46,-42,26,-42,-49,-47,-38,-40,26,26,82,26,26,-36,26,26,26,26,26,26,26,26,]),'EQUALS':([0,1,3,6,10,11,15,17,21,28,38,40,42,43,44,45,54,56,58,60,63,64,65,68,70,71,72,74,76,77,78,80,83,86,91,],[9,9,28,-43,-44,-48,-45,-42,-3,58,-46,-42,28,-42,-49,-47,-38,-40,80,-35,-34,-41,-36,84,-5,-8,-4,-7,-10,-9,-39,80,-37,-6,-11,]),'TIMES':([3,6,10,11,15,17,38,40,42,43,44,45,54,56,57,60,63,64,65,67,69,73,78,79,81,83,89,],[35,-43,-44,-48,-45,-42,-46,-42,35,-42,-49,-47,-38,-40,35,35,35,35,-36,35,35,35,35,35,35,35,35,]),'UNWORD':([0,1,6,7,8,9,10,11,12,13,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,33,34,35,36,37,38,42,43,44,45,52,53,54,55,56,58,59,60,61,63,64,65,66,70,71,72,74,75,76,77,78,82,83,84,86,90,91,],[11,11,-43,11,11,11,-44,11,11,11,-45,11,-42,11,11,-3,11,11,-30,-29,11,11,11,-31,11,11,11,11,11,11,-46,11,-42,-49,-47,-33,-32,-38,11,-40,11,-28,-35,11,-34,-41,-36,11,-5,-8,-4,-7,11,-10,-9,-39,11,-37,-26,-6,-27,-11,]),'THE':([0,1,6,8,9,10,11,13,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,33,34,35,36,37,38,42,43,44,45,52,53,54,55,56,58,59,60,61,63,64,65,66,70,71,72,74,75,76,77,78,82,83,84,86,90,91,],[12,12,-43,12,12,-44,-48,12,-45,12,-42,12,12,-3,12,12,-30,-29,12,12,12,-31,12,12,12,12,12,12,-46,12,-42,-49,-47,-33,-32,-38,12,-40,12,-28,-35,12,-34,-41,-36,12,-5,-8,-4,-7,12,-10,-9,-39,12,-37,-26,-6,-27,-11,]),'BY':([26,35,],[55,66,]),'DIVIDES':([3,6,10,11,15,17,38,40,42,43,44,45,54,56,60,63,64,65,78,83,],[37,-43,-44,-48,-45,-42,-46,-42,37,-42,-49,-47,-38,-40,-35,-34,-41,-36,-39,-37,]),'IF':([0,1,2,4,6,10,11,14,15,17,21,38,44,45,47,48,50,54,56,57,60,63,64,65,67,69,70,71,72,74,76,77,78,79,81,83,85,86,88,89,91,92,],[13,13,23,-23,-43,-44,-48,-25,-45,-42,-3,-46,-49,-47,-13,-12,-14,-38,-40,-22,-35,-34,-41,-36,-24,-15,-5,-8,-4,-7,-10,-9,-39,-21,-17,-37,-16,-6,-18,-19,-11,-20,]),'AND':([2,4,6,10,11,14,15,17,38,39,41,44,45,46,47,48,49,50,51,54,56,57,60,63,64,65,67,69,78,79,81,83,85,87,88,89,92,],[19,-23,-43,-44,-48,-25,-45,-42,-46,19,19,-49,-47,19,-13,-12,19,-14,19,-38,-40,-22,-35,-34,-41,-36,-24,-15,-39,-21,-17,-37,-16,19,-18,-19,-20,]),'FALSE':([0,1,8,9,13,16,19,20,21,22,23,70,71,72,74,75,76,77,86,91,],[14,14,14,14,14,14,14,14,-3,14,14,-5,-8,-4,-7,14,-10,-9,-6,-11,]),'DOES':([0,1,3,6,10,11,15,17,21,38,40,42,43,44,45,54,56,60,63,64,65,70,71,72,74,76,77,78,83,86,91,],[8,8,32,-43,-44,-48,-45,-42,-3,-46,-42,32,-42,-49,-47,-38,-40,-35,-34,-41,-36,-5,-8,-4,-7,-10,-9,-39,-37,-6,-11,]),'NOT':([0,1,3,6,8,9,10,11,13,15,16,17,19,20,21,22,23,32,38,40,42,43,44,45,54,56,60,63,64,65,70,71,72,74,75,76,77,78,83,86,91,],[16,16,31,-43,16,16,-44,-48,16,-45,16,-42,16,16,-3,16,16,62,-46,-42,31,-42,-49,-47,-38,-40,-35,-34,-41,-36,-5,-8,-4,-7,16,-10,-9,-39,-37,-6,-11,]),'EVENLY':([6,10,11,15,17,38,44,45,54,56,60,63,64,65,69,78,81,83,89,],[-43,-44,-48,-45,-42,-46,-49,-47,-38,-40,-35,-34,-41,-36,85,-39,88,-37,92,]),'OR':([2,4,6,10,11,14,15,17,24,25,29,36,38,39,41,44,45,46,47,48,49,50,51,52,53,54,56,57,59,60,63,64,65,67,69,78,79,81,83,84,85,87,88,89,90,92,],[22,-23,-43,-44,-48,-25,-45,-42,-30,-29,-31,68,-46,22,22,-49,-47,22,-13,-12,22,-14,22,-33,-32,-38,-40,-22,68,-35,-34,-41,-36,-24,-15,-39,-21,-17,-37,-26,-16,22,-18,-19,-27,-20,]),'MOD':([3,6,10,11,15,17,38,40,42,43,44,45,54,56,57,60,63,64,65,67,69,73,78,79,81,83,89,],[34,-43,-44,-48,-45,-42,-46,-42,34,-42,-49,-47,-38,-40,34,-35,-34,34,-36,34,34,34,34,34,34,34,34,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'proposition':([0,1,8,9,13,16,19,20,22,23,75,],[2,2,39,41,46,47,48,49,50,51,87,]),'sentence':([0,1,],[1,1,]),'identifier_content':([0,1,7,8,9,11,12,13,16,19,20,22,23,26,27,28,30,33,34,35,36,37,42,55,58,61,66,75,82,],[15,15,38,15,15,44,45,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'numeric_const':([0,1,8,9,13,16,19,20,22,23,26,27,28,30,33,34,35,36,37,42,55,58,61,66,75,82,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'program':([0,1,],[5,18,]),'numeric_expression':([0,1,8,9,13,16,19,20,22,23,26,27,28,30,33,34,35,36,37,42,55,58,61,66,75,82,],[3,3,3,42,3,3,3,3,3,3,54,56,57,60,63,64,65,67,69,73,78,79,81,83,3,89,]),'identifier':([0,1,8,9,13,16,19,20,22,23,26,27,28,30,33,34,35,36,37,42,55,58,61,66,75,82,],[17,17,40,43,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'inequality':([3,28,42,58,80,],[36,59,36,59,59,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> sentence','program',1,'p_program','parser.py',86),
  ('program -> sentence program','program',2,'p_program','parser.py',87),
  ('sentence -> proposition SENTENCE_END','sentence',2,'p_given','parser.py',102),
  ('sentence -> EQUALS proposition SENTENCE_END','sentence',3,'p_query','parser.py',108),
  ('sentence -> DOES proposition SENTENCE_END','sentence',3,'p_query','parser.py',109),
  ('sentence -> EQUALS numeric_expression numeric_expression SENTENCE_END','sentence',4,'p_query','parser.py',110),
  ('sentence -> EQUALS identifier SENTENCE_END','sentence',3,'p_query2','parser.py',122),
  ('sentence -> DOES identifier SENTENCE_END','sentence',3,'p_query2','parser.py',123),
  ('sentence -> proposition IF proposition SENTENCE_END','sentence',4,'p_forward_utilization','parser.py',130),
  ('sentence -> proposition IMPLIES proposition SENTENCE_END','sentence',4,'p_back_utilization','parser.py',135),
  ('sentence -> IF proposition THEN proposition SENTENCE_END','sentence',5,'p_back_utilization2','parser.py',140),
  ('proposition -> proposition AND proposition','proposition',3,'p_high_poposition','parser.py',147),
  ('proposition -> NOT proposition','proposition',2,'p_high_poposition','parser.py',148),
  ('proposition -> proposition OR proposition','proposition',3,'p_high_poposition2','parser.py',160),
  ('proposition -> numeric_expression DIVIDES numeric_expression','proposition',3,'p_evenly','parser.py',168),
  ('proposition -> numeric_expression DIVIDES numeric_expression EVENLY','proposition',4,'p_evenly','parser.py',169),
  ('proposition -> numeric_expression NOT DIVIDE numeric_expression','proposition',4,'p_not_evenly','parser.py',175),
  ('proposition -> numeric_expression NOT DIVIDE numeric_expression EVENLY','proposition',5,'p_not_evenly','parser.py',176),
  ('proposition -> numeric_expression DOES NOT DIVIDE numeric_expression','proposition',5,'p_not_evenly2','parser.py',182),
  ('proposition -> numeric_expression DOES NOT DIVIDE numeric_expression EVENLY','proposition',6,'p_not_evenly2','parser.py',183),
  ('proposition -> numeric_expression EQUALS EQUALS numeric_expression','proposition',4,'p_proposition','parser.py',190),
  ('proposition -> numeric_expression EQUALS numeric_expression','proposition',3,'p_proposition','parser.py',191),
  ('proposition -> TRUE','proposition',1,'p_proposition','parser.py',192),
  ('proposition -> numeric_expression inequality numeric_expression','proposition',3,'p_proposition2','parser.py',209),
  ('proposition -> FALSE','proposition',1,'p_proposition2','parser.py',210),
  ('inequality -> inequality OR EQUALS','inequality',3,'p_improper_inequality','parser.py',220),
  ('inequality -> inequality OR EQUALS TO','inequality',4,'p_improper_inequality','parser.py',221),
  ('inequality -> EQUALS inequality','inequality',2,'p_inequality_cut_is','parser.py',226),
  ('inequality -> CMP_LT','inequality',1,'p_inequality','parser.py',233),
  ('inequality -> CMP_GT','inequality',1,'p_inequality','parser.py',234),
  ('inequality -> THAN','inequality',1,'p_inequality','parser.py',235),
  ('inequality -> CMP_LT THAN','inequality',2,'p_inequality','parser.py',236),
  ('inequality -> CMP_GT THAN','inequality',2,'p_inequality','parser.py',237),
  ('numeric_expression -> numeric_expression PLUS numeric_expression','numeric_expression',3,'p_numeric_expression_addition','parser.py',242),
  ('numeric_expression -> numeric_expression MINUS numeric_expression','numeric_expression',3,'p_numeric_expression_subtraction','parser.py',247),
  ('numeric_expression -> numeric_expression TIMES numeric_expression','numeric_expression',3,'p_numeric_expression_multiplication','parser.py',252),
  ('numeric_expression -> numeric_expression TIMES BY numeric_expression','numeric_expression',4,'p_numeric_expression_multiplication','parser.py',253),
  ('numeric_expression -> numeric_expression DIVIDE numeric_expression','numeric_expression',3,'p_numeric_expression_division','parser.py',261),
  ('numeric_expression -> numeric_expression DIVIDE BY numeric_expression','numeric_expression',4,'p_numeric_expression_division','parser.py',262),
  ('numeric_expression -> numeric_expression POWER numeric_expression','numeric_expression',3,'p_numeric_expression_exponentiation','parser.py',270),
  ('numeric_expression -> numeric_expression MOD numeric_expression','numeric_expression',3,'p_numeric_expression_modulo','parser.py',275),
  ('numeric_expression -> identifier','numeric_expression',1,'p_numeric_expression_term','parser.py',281),
  ('numeric_expression -> numeric_const','numeric_expression',1,'p_numeric_expression_term','parser.py',282),
  ('numeric_const -> NUMERIC_CONSTANT','numeric_const',1,'p_numeric_const','parser.py',288),
  ('identifier -> identifier_content','identifier',1,'p_identifier','parser.py',293),
  ('identifier -> A identifier_content','identifier',2,'p_identifier','parser.py',294),
  ('identifier -> THE identifier_content','identifier',2,'p_identifier2','parser.py',307),
  ('identifier_content -> UNWORD','identifier_content',1,'p_identifier_content','parser.py',315),
  ('identifier_content -> UNWORD identifier_content','identifier_content',2,'p_identifier_content','parser.py',316),
]
